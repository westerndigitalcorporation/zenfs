on:
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * fri'
name: MTR Tests
jobs:
  mtr-tests:
    runs-on: self-hosted
    timeout-minutes: 1440
    steps:
      - name: Clean
        run: rm -rf ${GITHUB_WORKSPACE}/*
      - name: Checkout build scripts
        run: git clone ~/harness.git
      - name: Checkout percona-server
        uses: actions/checkout@v2
        with:
          repository: percona/percona-server
          ref: Percona-Server-8.0.26-16
          path: harness/percona-context/percona-server
          submodules: true
      - name: Remove default zenfs
        run: rm -r harness/percona-context/percona-server/storage/rocksdb/rocksdb_plugins/zenfs
      - name: Checkout recent zenfs
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: harness/percona-context/percona-server/storage/rocksdb/rocksdb_plugins/zenfs
      - name: Run MTR RocksDB test
        id: mtrTest1
        run: cd harness && st --silent -o logs/makeMtrRocksdb make NO_VAGRANT=1 RUN_ARGS="mtrRocksdbTest" results/zenfs-mtr.xml
        continue-on-error: true
      - name: Run MTR RocksDB replication test
        id: mtrTest2
        run: cd harness && st --silent -o logs/makeMtrRocksdbReplication make NO_VAGRANT=1 RUN_ARGS="mtrRocksdbReplicationTest" results/zenfs-mtr.xml
        continue-on-error: true
      - name: Run MTR RocksDB parallel test
        id: mtrTest3
        run: cd harness && st --silent -o logs/makeMtrRocksdbParallel make NO_VAGRANT=1 RUN_ARGS="mtrRocksdbParallelTest" results/zenfs-mtr.xml
        continue-on-error: true
      - name: Run MTR RocksDB parallel replication test
        id: mtrTest4
        run: cd harness && st --silent -o logs/makeMtrRocksdbParallelReplication make NO_VAGRANT=1 RUN_ARGS="mtrRocksdbParallelReplicationTest" results/zenfs-mtr.xml
        continue-on-error: true
      - name: Collect Results
        run: cd harness && make NO_VAGRANT=1 upload 
        if: always()
      - name: Remove docker images
        run: docker image prune --force
        if: always()
      - name: Failure check
        if: steps.mtrTest1.outcome != 'success' || steps.mtrTest2.outcome != 'success' || steps.mtrTest3.outcome != 'success' || steps.mtrTest4.outcome != 'success' 
        run: exit 1
